//
//  ContentListViewController.swift
//  mApp
//
//  Created by BahadÄ±r Enes Atay on 25.07.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ContentListDisplayLogic: AnyObject {
    func displaySeries(_ viewModel: ContentList.FetchRequest.ViewModel)
    func displayError(_ error: String)
}

class ContentListViewController: BaseViewController {
    var interactor: ContentListInteractorInput?
    var router: (NSObjectProtocol & ContentListRoutingLogic)?
    
    lazy private var alertLabel = CustomLabel()
    lazy private var searchBar = SearchView()
    lazy private var collectionView = BaseCollectionView(collectionCell: .movieCell)
      
    override init() {
        super.init()
        setup()
    }
        
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ContentListInteractor()
        let presenter = ContentListPresenter()
        let router = ContentListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setUI()
        
    }
    
    //MARK: - Request
    
    private func getSeries(_ name: String) {
        self.startLoading()
        var request = SeriesRequest()
        request.series = name
        interactor?.fetchContents(request: request)
    }
    
    //MARK: - Private Methods
    
    private func setUI() {
        view.backgroundColor = .white
        searchBar.searchDelegate = self
        self.view.addSubview(searchBar)
        searchBar.snp.makeConstraints { make in
            make.top.equalToSuperview().inset(2.5*LARGE_GAP)
            make.left.right.equalToSuperview().inset(LARGE_GAP)
        }
        collectionView.collectionDelegate = self
        self.view.addSubview(collectionView)
        collectionView.snp.makeConstraints { make in
            make.top.equalTo(searchBar.snp.bottom).offset(GAP)
            make.left.right.equalToSuperview()
            make.bottom.equalToSuperview()
        }
        
        alertLabel.styleText(.big18, .iMedium, .white, .center)
        self.view.addSubview(alertLabel)
        alertLabel.snp.makeConstraints { make in
            make.center.equalToSuperview()
            make.left.right.equalToSuperview().inset(2*LARGE_GAP)
        }
        alertLabel.isHidden = true
    }

    private func showAlertLabel() {
        alertLabel.isHidden = false
    }
    
    private func hideAlertLabel() {
        alertLabel.isHidden = true
    }
}

//MARK: - Display Logic
extension ContentListViewController: ContentListDisplayLogic {
    func displayError(_ error: String) {
        self.presentAlert(message: error)
        self.stopLoading()
    }
    
    func displaySeries(_ viewModel: ContentList.FetchRequest.ViewModel) {
        if viewModel.seriesData.count > 0 {
            self.collectionView.updateData(viewModel.seriesData)
        }
        self.stopLoading()
    }
}

//MARK: - COLLECTION VIEW DELEGATE
extension ContentListViewController: CollectionViewDelegate {
    func goToController(_ data: Any?) {
        guard let movieID = data as? String  else { return }
        let destination = DetailViewController(movieID)
        router?.present(from: self, to: destination)
    }
}

//MARK: - SEARCH VIEW DELEGATE
extension ContentListViewController: SearchViewDelegate {
    func searchMovie(_ name: String) {
        self.hideAlertLabel()
        self.getSeries(name)
    }
    
    func reloadData() {
        self.collectionView.updateData([])
        self.hideAlertLabel()
    }
}
