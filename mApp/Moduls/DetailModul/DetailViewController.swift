//
//  DetailViewController.swift
//  mApp
//
//  Created by BahadÄ±r Enes Atay on 26.07.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailDisplayLogic: AnyObject {
    func getFetchedDetail(viewModel: Detail.FetchRequest.ViewModel)
    func presentError(_ error: String)
}

class DetailViewController: BaseViewController {
    
    var interactor: DetailBusinessLogic?
    var router: (NSObjectProtocol & DetailRoutingLogic)? //(NSObjectProtocol & DetailRoutingLogic & DetailDataPassing)?
    
    lazy private var scrollView = UIScrollView()
    lazy private var contentView = UIView()
    
    lazy private var dismissButton = UIButton()
    
    lazy private var titleLabel = CustomLabel()
    lazy private var posterView = UIImageView()
    
    lazy private var yearLabel = CustomLabel()
    lazy private var ratingLabel = CustomLabel()
    lazy private var typeLabel = CustomLabel()
    lazy private var runtimeLabel = CustomLabel()
    
    lazy private var directorLabel = CustomLabel()
    lazy private var writerLabel = CustomLabel()
    lazy private var genreLabel = CustomLabel()
    
    lazy private var awardsLabel = CustomLabel()
    lazy private var productionLabel = CustomLabel()
    
    lazy private var plotLabel = CustomLabel()
    
    private enum RatingColor {
        case low
        case medium
        case high

        var color: UIColor {
            switch self {
            case .low: return .systemRed
            case .medium: return .systemOrange
            case .high: return .systemGreen
            }
        }

        static func setColor(_ rating: Double) -> RatingColor {
            var color: RatingColor = .low
            if rating < 5 {
                color = .low
            } else if rating >= 5 && rating < 8 {
                color = .medium
            } else {
                color = .high
            }
            return color
        }
    }
    
    private let _movieID: String
    
    init(_ movieID: String) {
        self._movieID = movieID
        super.init()
        setup()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = DetailInteractor()
        let presenter = DetailPresenter()
        let router = DetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
//        router.dataStore = interactor
    }
        
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setUI()
        self.requestSelectedContentData()
    }
    
    //MARK: - Requests
    private func requestSelectedContentData() {
        self.startLoading()
        var request = ContentDetailRequest()
        request.id = _movieID
        if let plotType = PlotType.full.description { request.plot = plotType }
        interactor?.fetchDetail(request: request)
    }
    
    //MARK: - Methods
    private func setUI() {
        self.view.backgroundColor = UIColor(red: 246/256, green: 246/256, blue: 246/256, alpha: 1)
        self.view.addSubview(scrollView)
        scrollView.showsVerticalScrollIndicator = false
        scrollView.snp.makeConstraints { (make) in
            make.top.equalTo(self.view.safeAreaLayoutGuide.snp.top)
            make.left.right.equalToSuperview()
            make.centerX.equalToSuperview()
            make.bottom.equalToSuperview()
        }
        
        scrollView.addSubview(contentView)
        contentView.snp.makeConstraints { (make) in
            make.top.equalToSuperview()
            make.bottom.equalToSuperview()
            make.left.right.equalToSuperview()
            make.centerX.equalToSuperview()
            make.height.greaterThanOrEqualToSuperview()
        }
        
        contentView.addSubview(dismissButton)
        dismissButton.snp.makeConstraints { make in
            make.top.equalToSuperview().inset(LARGE_GAP)
            make.right.equalToSuperview().inset(LARGE_GAP)
            make.size.equalTo(50)

        }
        dismissButton.imageView?.contentMode = .scaleAspectFill
        dismissButton.setImage(UIImage(systemName: "xmark"), for: .normal)
        dismissButton.tintColor = .black
        dismissButton.addTarget(self, action: #selector(dismissButtonTapped), for: .touchUpInside)

        
        let posterBG = UIView()
        posterBG.addShadow(.black, 0.3)
        contentView.addSubview(posterBG)
        posterBG.snp.makeConstraints { make in
            make.top.equalToSuperview().inset(LARGE_GAP)
            make.left.equalToSuperview()
            make.height.lessThanOrEqualTo(200)
            make.width.lessThanOrEqualToSuperview().dividedBy(2)
        }
        
        posterView.contentMode = .scaleAspectFit
        posterBG.addSubview(posterView)
        posterView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
        
        titleLabel.styleText(.large26, .iSemibold, .darkText, .left)
        contentView.addSubview(titleLabel)
        titleLabel.snp.makeConstraints { make in
            make.top.equalTo(posterBG.snp.bottom).offset(LARGE_GAP)
            make.left.equalToSuperview().inset(LARGE_GAP)
            make.right.equalToSuperview().inset(2*LARGE_GAP + 50)
        }
        
        typeLabel.setDetailStyle(with: AppLocalization.text(.DETAIL_TYPE_TITLE))
        yearLabel.setDetailStyle(with: AppLocalization.text(.DETAIL_YEAR_TITLE))
        ratingLabel.setDetailStyle(with: AppLocalization.text(.DETAIL_RATING_TITLE))
        runtimeLabel.setDetailStyle(with: AppLocalization.text(.DETAIL_RUNTIME_TITLE))
        let topStack = self.setStack([typeLabel, yearLabel, ratingLabel, runtimeLabel])
        self.contentView.addSubview(topStack)
        topStack.snp.makeConstraints { make in
            make.top.equalTo(titleLabel.snp.bottom).offset(LARGE_GAP)
            make.left.right.equalToSuperview().inset(LARGE_GAP)
        }
                
        awardsLabel.setDetailStyle(with: AppLocalization.text(.DETAIL_AWARDS_TITLE))
        self.contentView.addSubview(awardsLabel)
        self.awardsLabel.snp.makeConstraints { make in
            make.top.equalTo(topStack.snp.bottom).offset(GAP)
            make.left.right.equalToSuperview().inset(LARGE_GAP)
        }
        
        directorLabel.setDetailStyle(with: AppLocalization.text(.DETAIL_DIRECTOR_TITLE))
        self.contentView.addSubview(directorLabel)
        self.directorLabel.snp.makeConstraints { make in
            make.top.equalTo(awardsLabel.snp.bottom).offset(GAP)
            make.left.equalToSuperview().inset(LARGE_GAP)
            make.width.lessThanOrEqualToSuperview().dividedBy(2)
        }
        
        writerLabel.setDetailStyle(with: AppLocalization.text(.DETAIL_WRITER_TITLE))
        self.contentView.addSubview(writerLabel)
        self.writerLabel.snp.makeConstraints { make in
            make.top.equalTo(directorLabel)
            make.left.equalTo(directorLabel.snp.right).offset(GAP)
            make.width.equalTo(directorLabel)
            make.right.equalToSuperview().inset(LARGE_GAP)
        }
        
        genreLabel.setDetailStyle(with: AppLocalization.text(.DETAIL_GENRE_TITLE))
        self.contentView.addSubview(genreLabel)
        self.genreLabel.snp.makeConstraints { make in
            make.top.equalTo(writerLabel.snp.bottom).offset(GAP)
            make.left.equalTo(writerLabel)
            make.width.equalTo(writerLabel)
        }
        
        productionLabel.setDetailStyle(with: AppLocalization.text(.DETAIL_PRODUCTION_TITLE))
        self.contentView.addSubview(productionLabel)
        self.productionLabel.snp.makeConstraints { make in
            make.top.equalTo(directorLabel.snp.bottom).offset(GAP)
            make.left.equalTo(directorLabel)
            make.width.equalTo(directorLabel)
            make.bottom.equalTo(genreLabel)
        }
        
        plotLabel.setDetailStyle(with: AppLocalization.text(.DETAIL_PLOT_TITLE))
        self.contentView.addSubview(plotLabel)
        self.plotLabel.snp.makeConstraints { make in
            make.top.equalTo(productionLabel.snp.bottom).offset(2*LARGE_GAP)
            make.left.right.equalToSuperview().inset(LARGE_GAP)
            make.bottom.lessThanOrEqualToSuperview().inset(2*LARGE_GAP)
        }
    }
  
    private func setStack(_ arrangedSubviews: [CustomLabel], _ axis: NSLayoutConstraint.Axis = .horizontal) -> UIStackView {
        let stack = UIStackView()
        for subview in arrangedSubviews {
            stack.addArrangedSubview(subview)
        }
        stack.distribution = .fillEqually
        stack.spacing = SMALL_GAP
        stack.axis = axis
        return stack
    }
    
    private func updateUI(_ movie: Detail.FetchRequest.ViewModel.ContentData) {
        if let posterURL = URL(string: movie.image) {
            posterView.kf.setImage(with: posterURL)
        }
        titleLabel.text = movie.title
        self.setRatingText(movie.rating)
        directorLabel.setText(AppLocalization.text(.DETAIL_DIRECTOR_TITLE), movie.director)
        writerLabel.setText(AppLocalization.text(.DETAIL_WRITER_TITLE), movie.writer)
        yearLabel.setText(AppLocalization.text(.DETAIL_YEAR_TITLE), movie.year)
        genreLabel.setText(AppLocalization.text(.DETAIL_GENRE_TITLE), movie.genre)
        awardsLabel.setText(AppLocalization.text(.DETAIL_AWARDS_TITLE), movie.awards)
        productionLabel.setText(AppLocalization.text(.DETAIL_PRODUCTION_TITLE), movie.production)
        typeLabel.setText(AppLocalization.text(.DETAIL_TYPE_TITLE), movie.type)
        runtimeLabel.setText(AppLocalization.text(.DETAIL_RUNTIME_TITLE), movie.runtime)
        plotLabel.setText(AppLocalization.text(.DETAIL_PLOT_TITLE), movie.plot)
    }
    
    private func setRatingText(_ imdbRating: String) {
        let rating = Double(imdbRating) ?? 0
        let ratingColor = RatingColor.setColor(rating)
        ratingLabel.setText(AppLocalization.text(.DETAIL_RATING_TITLE), imdbRating, ratingColor.color)
    }
    
    //MARK: - Actions
    
    @IBAction func dismissButtonTapped() {
        self.dismiss(animated: true, completion: nil)
    }
}

//MARK: - Display Logic

extension DetailViewController: DetailDisplayLogic {
    func getFetchedDetail(viewModel: Detail.FetchRequest.ViewModel) {
        self.stopLoading()
        let contentDetail = viewModel.contentData
        self.updateUI(contentDetail)
    }
    
    func presentError(_ error: String) {
        self.presentAlert(message: error)
        self.stopLoading()
    }    
}

